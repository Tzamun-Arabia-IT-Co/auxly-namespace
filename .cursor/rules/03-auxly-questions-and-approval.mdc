---
description: Auxly Rule #3 - All questions via MCP, request approval for significant changes, never change status without confirmation
alwaysApply: true
priority: 1
---

# üîí AUXLY RULE #3: QUESTIONS AND APPROVAL

**MANDATORY: Ask questions via MCP, request approval for significant changes, confirm before status changes**

---

## PART A: ALL QUESTIONS VIA MCP - NEVER IN CHAT

### ‚úÖ CORRECT WAY TO ASK:

```typescript
await mcp_extension-auxly_auxly_ask_question({
  taskId: "X",
  questionText: "Clear, specific question?",
  category: "TECHNICAL DECISION",
  priority: "high",
  context: "Detailed explanation...",
  options: [
    { label: "Option A", recommended: true },
    { label: "Option B" }
  ]
});
```

### üìã QUESTION CATEGORIES:
- `TECHNICAL DECISION` - Technical choices
- `ARCHITECTURE` - Design decisions
- `UX` - User experience
- `CLARIFICATION` - Requirements unclear
- `APPROVAL REQUEST` - Significant changes

### ‚ùå FORBIDDEN IN CHAT:
- "What would you like me to do?"
- "Should I..."
- "Would you prefer..."

**ALL questions MUST use `mcp_extension-auxly_auxly_ask_question`**

---

## PART B: REQUEST APPROVAL FOR SIGNIFICANT CHANGES

### ‚ö†Ô∏è REQUIRES APPROVAL:

1. **Database schema changes**
2. **API breaking changes**
3. **Security changes**
4. **Architecture refactoring**
5. **Major dependencies**

```typescript
await mcp_extension-auxly_auxly_ask_question({
  taskId: "X",
  questionText: "Approve: Add 'trial_status' column to database?",
  category: "APPROVAL REQUEST",
  priority: "critical",
  context: "Database migration needed:\n- Add trial_start\n- Add trial_end\n- Add trial_status\n\nImpact: Requires npm run migrate:up",
  options: [
    { label: "‚úÖ Approve", recommended: true },
    { label: "‚ùå Reject" }
  ]
});
```

---

## PART C: NEVER CHANGE STATUS WITHOUT CONFIRMATION

### ‚ùå WRONG:
```typescript
await mcp_extension-auxly_auxly_update_task({
  taskId: "X",
  status: "done"
});
// ‚ùå Must ask first!
```

### ‚úÖ CORRECT:
```typescript
// STEP 1: Ask user
await mcp_extension-auxly_auxly_ask_question({
  taskId: "X",
  questionText: "Task complete. Mark as 'done'?",
  category: "APPROVAL REQUEST",
  priority: "medium",
  context: "All criteria met:\n- Feature working ‚úÖ\n- Files logged ‚úÖ",
  options: [
    { label: "‚úÖ Mark as done", recommended: true },
    { label: "üìù Move to review" }
  ]
});

// STEP 2: After approval, update
await mcp_extension-auxly_auxly_update_task({
  taskId: "X",
  status: "done",
  aiWorkingOn: false
});
```

### üìã STATUS TRANSITIONS:

| Transition | Requires Approval? |
|-----------|-------------------|
| `todo` ‚Üí `in_progress` | ‚ùå NO |
| `in_progress` ‚Üí `review` | ‚úÖ YES |
| `in_progress` ‚Üí `done` | ‚úÖ YES |
| `review` ‚Üí `done` | ‚úÖ YES |
| Any ‚Üí `cancelled` | ‚úÖ YES |

---

## Why This Rule Exists:

‚úÖ **Questions tracked** - All in task Q&A history  
‚úÖ **User control** - User approves big changes  
‚úÖ **No surprises** - User confirms completion  
‚úÖ **Professional** - Respectful workflow

---

**ENFORCEMENT: ZERO questions in chat. ALL via `mcp_extension-auxly_auxly_ask_question`. ALWAYS ask before marking done/review/cancelled.**
