---
description: Auto-Notification System - AI must poll for answers every 5 seconds after asking questions via MCP, no manual typing required
alwaysApply: true
---

# üîî Auto-Notification System - AI Receives Answers Immediately

**GOAL: AI agent is notified immediately when user answers a question**

---

## ‚ùì THE PROBLEM

**Current workflow:**
1. AI asks question via MCP ‚Üí Question saved to `.auxly/tasks.json`
2. User sees popup and clicks answer ‚Üí Answer saved to `.auxly/tasks.json`
3. AI must wait for user to type in chat ‚Üí Then AI checks task manually
4. ‚è±Ô∏è **Delay:** AI doesn't know answer is ready until user manually prompts

**Desired workflow:**
1. AI asks question via MCP ‚Üí Question saved
2. User answers ‚Üí Answer saved
3. ‚úÖ **AI immediately notified** ‚Üí AI sees answer without user typing
4. AI continues work automatically

---

## üí° SOLUTION: POLLING + NOTIFICATION FILE

### **Approach:**

When AI is waiting for an answer, it should **periodically check** for new answers.

```typescript
// AI asks question
await mcp_auxly_auxly_ask_question({
  taskId: "X",
  questionText: "Which database to use?",
  // ...
});

// AI immediately starts polling for answer
let answerReceived = false;
const pollInterval = 5000; // Check every 5 seconds

while (!answerReceived) {
  // Wait 5 seconds
  await new Promise(resolve => setTimeout(resolve, pollInterval));
  
  // Check task for answer
  const task = await mcp_auxly_auxly_get_task({ taskId: "X" });
  const lastQA = task.qaHistory?.[task.qaHistory.length - 1];
  
  if (lastQA?.answer) {
    answerReceived = true;
    console.log("‚úÖ Received answer:", lastQA.answer.selectedOption);
    
    // Continue work immediately
    await continueImplementation(lastQA.answer);
  } else {
    console.log("‚è≥ Waiting for user answer... (checking again in 5s)");
  }
}
```

---

## üéØ BETTER SOLUTION: NOTIFICATION FILE

**Create a notification system using a special file:**

### **1. Extension writes notification when answer submitted:**

```typescript
// extension/src/webview/TaskPanelProvider.ts
private async handleAIQuestionAnswer(questionId: string, answer: string, taskId?: string) {
  // ... existing code to save answer ...
  
  // Write notification file
  const notificationPath = path.join(workspacePath, '.auxly', 'notifications.json');
  const notification = {
    type: 'question_answered',
    taskId: taskId,
    questionId: questionId,
    answer: answer,
    timestamp: new Date().toISOString()
  };
  
  fs.writeFileSync(notificationPath, JSON.stringify(notification, null, 2));
}
```

### **2. AI checks notification file:**

```typescript
// AI workflow
await mcp_auxly_auxly_ask_question({ /* ... */ });

// Poll for notification
let answered = false;
while (!answered) {
  await new Promise(resolve => setTimeout(resolve, 3000)); // Check every 3s
  
  const notification = await checkNotificationFile();
  if (notification?.type === 'question_answered' && notification.taskId === currentTaskId) {
    answered = true;
    console.log("üîî NOTIFICATION: User answered question!");
    
    // Clear notification
    await clearNotificationFile();
    
    // Continue work
    await continueWithAnswer(notification.answer);
  }
}
```

---

## ‚ö° RECOMMENDED AI WORKFLOW

**When AI asks a question and needs to wait for answer:**

```typescript
async function askAndWait(taskId: string, question: any) {
  // 1. Ask question
  console.log("ü§ñ Asking user a question...");
  await mcp_auxly_auxly_ask_question({
    taskId,
    ...question
  });
  
  // 2. Inform user we're waiting
  console.log("‚è≥ Waiting for your answer... I'll check automatically every 5 seconds.");
  console.log("üí° You don't need to type anything - just answer in the popup!");
  
  // 3. Poll for answer
  let attempts = 0;
  const maxAttempts = 60; // 5 minutes max (60 * 5s)
  
  while (attempts < maxAttempts) {
    await new Promise(resolve => setTimeout(resolve, 5000));
    attempts++;
    
    // Check for answer
    const task = await mcp_auxly_auxly_get_task({ taskId });
    const qaHistory = task.qaHistory || [];
    const lastQA = qaHistory[qaHistory.length - 1];
    
    if (lastQA?.answer) {
      console.log("‚úÖ Answer received:", lastQA.answer.selectedOption || lastQA.answer.customAnswer);
      return lastQA.answer;
    }
    
    // Show progress
    if (attempts % 6 === 0) { // Every 30 seconds
      console.log(`‚è≥ Still waiting... (${attempts * 5}s elapsed)`);
    }
  }
  
  // Timeout
  console.log("‚è±Ô∏è Timeout: No answer received after 5 minutes.");
  console.log("üí¨ Please type here when you're ready, and I'll check again.");
  return null;
}

// Usage
const answer = await askAndWait("1", {
  questionText: "Which approach?",
  category: "TECHNICAL DECISION",
  priority: "high",
  options: [
    { label: "Option A" },
    { label: "Option B" }
  ]
});

if (answer) {
  // Continue implementation
  await implementFeature(answer);
}
```

---

## üìã USER EXPERIENCE

**What user sees:**

```
ü§ñ AI Agent: I have a question about the database schema.

[Question popup appears automatically]

ü§ñ AI Agent: ‚è≥ Waiting for your answer... I'll check automatically every 5 seconds.
üí° You don't need to type anything - just answer in the popup!

[User clicks answer]

[5 seconds later]

ü§ñ AI Agent: ‚úÖ Answer received: "Use PostgreSQL"
ü§ñ AI Agent: Great! Continuing implementation...
```

**User does NOT need to type anything!** ‚úÖ

---

## üîß IMPLEMENTATION CHECKLIST

To enable auto-notification:

- ‚úÖ AI polls task every 5 seconds after asking question
- ‚úÖ AI shows progress messages ("Still waiting...")
- ‚úÖ AI automatically continues when answer detected
- ‚úÖ User sees clear message: "Don't need to type, just answer popup"
- ‚úÖ Timeout after 5 minutes (ask user to prompt manually)

---

## ‚úÖ EXAMPLE: COMPLETE AUTO-WORKFLOW

```typescript
// User: "Build chat feature"

// AI creates task
const task = await mcp_auxly_auxly_create_task({
  title: "Build real-time chat",
  priority: "high"
});

// AI asks question
console.log("ü§ñ I have a question about WebSocket implementation...");
await mcp_auxly_auxly_ask_question({
  taskId: task.id,
  questionText: "Which WebSocket library?",
  category: "TECHNICAL DECISION",
  options: [
    { label: "Socket.IO", recommended: true },
    { label: "ws library" }
  ]
});

console.log("‚è≥ Waiting for your answer... I'll check automatically every 5 seconds.");
console.log("üí° Just click your choice in the popup - no need to type here!");

// Auto-poll
let answer = null;
for (let i = 0; i < 60; i++) {
  await new Promise(r => setTimeout(r, 5000));
  
  const updatedTask = await mcp_auxly_auxly_get_task({ taskId: task.id });
  const lastQA = updatedTask.qaHistory?.[updatedTask.qaHistory.length - 1];
  
  if (lastQA?.answer) {
    answer = lastQA.answer.selectedOption;
    console.log(`‚úÖ Answer received: "${answer}"`);
    break;
  }
  
  if (i % 6 === 0 && i > 0) {
    console.log(`‚è≥ Still waiting... (${i * 5}s elapsed)`);
  }
}

if (answer) {
  console.log(`üöÄ Great! I'll use ${answer}. Starting implementation...`);
  // Continue automatically
  await implementWithSocketIO();
} else {
  console.log("‚è±Ô∏è Timeout. Please type when ready!");
}
```

---

## üéØ KEY TAKEAWAY

**AI should AUTOMATICALLY POLL for answers after asking questions.**

**User experience:**
1. AI asks question ‚Üí Popup appears
2. User clicks answer
3. ‚úÖ **AI detects answer within 5 seconds**
4. AI continues work **automatically**

**No typing required!** üéâ

---

**IMPLEMENT THIS PATTERN FOR ALL MCP QUESTIONS.**
